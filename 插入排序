我的方案1：
#include<stdio.h>
void Cr(int a[],int sz)
{
    int i;
    for (i = 1; i < sz; i++)
    {
        int j = i - 1;
        while (a[j] > a[j + 1] && j >= 0)
        {
            int tmp = a[j + 1];
            a[j+1] = a[j];
            a[j] = tmp;
            j--;
        }
    }
    
}
int main()
{
    int a[] = { 9,8,7,6,5,4,3,2,1,0 };
    Cr(a,10);
    int i;
    for (i = 0; i < 10; i++)
    {
        printf("%d ", a[i]);
    }
    return 0;
}
很有意思，也是利用了有序和无须的思想，先假设第一个元素有序，后面的元素依次变为有序，本质和冒泡排序类似，但代码更简洁，相当于优化版的冒泡排序，但思路更接近插入排序，于是放到这里

真正的插入排序；
#include<stdio.h>

void Px(int a[], int sz)
{
    int i, j;
    for (i = 1; i < sz; i++)
    {
        j = i - 1;
        int k = a[i];
        while (a[j] > k && j >= 0)
        {
            int tmp = a[j + 1];
            a[j + 1] = a[j];
            a[j] = tmp;
            j--;
        }
        a[j + 1] = k;
    }
}
int main()
{
    int a[10] = { 9,8,7,6,5,4,3,2,1,0 };
    Px(a, 10);
    int i = 0;
    for (i = 0; i < 10; i++)
    {
        printf("%d ", a[i]);
    }
    return 0;
}
利用了提取与插入的方法，每次提取无序数列中的第一个元素，与前面的有序数列变成有序，升序排序的话，把比关键元素的数值大的元素往前提，使其有序排列
